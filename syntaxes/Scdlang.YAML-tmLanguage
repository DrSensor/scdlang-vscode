# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Scdlang
scopeName: source.scdlang
fileTypes: [scl, scdl, fsm, hfsm, statecharts]
## References
# https://gist.github.com/DamnedScholar/622926bcd222eb1ddc483d12103fd315 (cheatsheet)
# https://gist.github.com/Aerijo/b8c82d647db783187804e86fa0a604a1 (Guide for writing textmate grammar)

patterns:
  - include: '#comment'
  - include: '#expression'
  - include: '#string'

repository:
  #region transition
  expression:
    patterns:
    - include: '#normal-transition'
    - include: '#toggle-transition'
    - include: '#loop-transition'

  loop-transition:
    patterns:
    - include: '#loop-to'           # A ->> B | A >-> B
    - include: '#loop-from'         # B <<- A | B <-< A
    - include: '#self-transition'   # ->> B
    - include: '#internal-transition'   # ->> B

  toggle-transition: # A <-> B
    match: ([A-Z]\w*)\s*(<-+>)\s*([A-Z]\w*)
    captures: 
      '0': { name: meta.transition.toggle.scl }
      '1':
        name: entity.other.inherited-class.scl
              meta.state.from.scl meta.state.into.scl
      '2': { name: keyword.operator.scl meta.arrow.scl }
      '3':
        name: entity.other.inherited-class.scl
              meta.state.into.scl meta.state.from.scl

  normal-transition:
    patterns: 
    - include: '#transition-to'     # A -> B
    - include: '#transition-from'   # B <- A

  transition-to:
    match: ([A-Z]\w*)\s*(-+>)\s*([A-Z]\w*)
    captures: 
      '0': { name: meta.transition.normal.scl }
      '1': { name: entity.name.class.scl meta.state.from.scl }
      '2': { name: keyword.operator.scl meta.arrow.scl }
      '3': { name: entity.other.inherited-class.scl meta.state.into.scl }

  transition-from:
    match: ([A-Z]\w*)\s*(<-+)\s*([A-Z]\w*)
    captures: 
      '0': { name: meta.transition.normal.scl }
      '3': { name: entity.name.class.scl meta.state.from.scl }
      '2': { name: keyword.operator.scl meta.arrow.scl }
      '1': { name: entity.other.inherited-class.scl meta.state.into.scl }

  loop-to:
    match: ([A-Z]\w*)\s*(-+>>|>-+>)\s*([A-Z]\w*)
    captures: 
      '0': { name: meta.transition.loop.scl }
      '1': { name: entity.name.class.scl meta.state.from.scl }
      '2': { name: keyword.operator.scl meta.arrow.scl }
      '3': { name: entity.other.inherited-class.scl markup.italic.scl meta.state.into.scl }

  loop-from:
    match: ([A-Z]\w*)\s*(<<-+|<-+<)\s*([A-Z]\w*)
    captures: 
      '0': { name: meta.transition.loop.scl }
      '3': { name: entity.name.class.scl meta.state.from.scl }
      '2': { name: keyword.operator.scl meta.arrow.scl }
      '1': { name: entity.other.inherited-class.scl markup.italic.scl meta.state.into.scl }

  self-transition:
    match: (-+>>)\s*([A-Z]\w*)
    captures: 
      '0': { name: meta.transition.loop.scl }
      '2':
        name: entity.other.inherited-class.scl markup.italic.scl
              meta.state.from.into.scl
      '1': { name: keyword.operator.scl meta.arrow.scl }

  internal-transition:
    patterns: 
    - include: '#action'
    - match: ([A-Z]\w*\s*)?(\@)\s*([A-Z]\w*)?(?:\[([a-z]\w*)\])?
      captures:
        '0': { name: meta.event.scl }
        '1': { name: entity.name.class.scl meta.state.from.scl }
        '2': { name: keyword.operator.scl meta.at.scl }   # @
        '3': { name: entity.name.label.scl meta.event.trigger.scl }
        '4': { name: entity.name.function.scl meta.event.guard.scl }
  
  action:
    match: (\|>)\s*([a-z]\w*)
    captures: 
      '0': { name: meta.action.scl }
      '1': { name: keyword.operator.scl meta.pipe.scl } # |>
      '2': { name: entity.name.function.scl meta.action.scl }
  #endregion transition

  #region strings and template strings
  string:
    patterns:
    - include: '#qstring-single'
    - include: '#qstring-double'
    - include: '#template'

  qstring-double:
    name: string.quoted.double.scl
    comment: "double quoted strings"
    begin: '"'
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.scl }
    end: '(")|((?:[^\\\n])$)'
    endCaptures:
      '1': { name: punctuation.definition.string.end.scl }
      '2': { name: invalid.illegal.newline.scl }
    patterns:
    - include: '#string-character-escape'

  qstring-single:
    name: string.quoted.single.scl
    comment: 'single quoted strings'
    begin: "'"
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.scl }
    end: (\')|((?:[^\\\n])$)
    endCaptures:
      '1': { name: punctuation.definition.string.end.scl }
      '2': { name: invalid.illegal.newline.scl }
    patterns:
    - include: '#string-character-escape'

  template:
    name: string.template.scl
    comment: ' `backtick quoted strings` or tag`strings` '
    begin: '([a-z]+)?(`)'
    beginCaptures:
      '1': { name: entity.name.function.tagged-template.scl }
      '2': { name: punctuation.definition.string.template.begin.scl }
    end: '`'
    endCaptures:
      '0': { name: punctuation.definition.string.template.end.scl}
    patterns:
    - include: '#string-character-escape'

  string-character-escape:
    name: constant.character.escape.scl
    comment: escape character in unicode hex like \x9f02
    match: \\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)
  #endregion strings and template strings

  #region comments and directives
  comment:
    patterns:
    - name: comment.block.documentation.scl
      begin: /\*\*(?!/)
      beginCaptures:
        '0': { name: punctuation.definition.comment.scl }
      end: \*/
      endCaptures:
        '0': { name: punctuation.definition.comment.scl }
      patterns:
      - include: '#docblock'
    - name: comment.block.scl
      begin: (/\*)(?:\s*((@)internal)(?=\s|(\*/)))?
      beginCaptures:
        '1': { name: punctuation.definition.comment.scl }
        '2': { name: storage.type.internaldeclaration.scl }
        '3': { name: punctuation.decorator.internaldeclaration.scl }
      end: \*/
      endCaptures:
        '0': { name: punctuation.definition.comment.scl }
    - begin: (^[ \t]+)?((//)(?:\s*((@)internal)(?=\s|$))?)
      beginCaptures:
        '1': { name: punctuation.whitespace.comment.leading.scl }
        '2': { name: comment.line.double-slash.scl }
        '3': { name: punctuation.definition.comment.scl }
        '4': { name: storage.type.internaldeclaration.scl }
        '5': { name: punctuation.decorator.internaldeclaration.scl }
      end: (?=$)
      contentName: comment.line.double-slash.scl

  single-line-comment-consuming-line-ending:
    begin: (^[ \t]+)?((//)(?:\s*((@)internal)(?=\s|$))?)
    beginCaptures:
      '1': { name: punctuation.whitespace.comment.leading.scl }
      '2': { name: comment.line.double-slash.scl }
      '3': { name: punctuation.definition.comment.scl }
      '4': { name: storage.type.internaldeclaration.scl }
      '5': { name: punctuation.decorator.internaldeclaration.scl }
    end: (?=^)
    contentName: comment.line.double-slash.scl
  #endregion comments and directives
